!!!Lambda Expressions

%%tabbedSection 
%%tab-definition
!! definition
* In practical terms, it may be safe to think of lambda expressions as anonymous (private) methods, but they are different from anonymous classes.
** differences: 
*** method:  
**** Lambdas implement a functional interface.
**** Anonymous Inner Classes can extend a class or implement an interface with any number of methods.
*** compilation: 
**** Anonymous compiles to a class, 
**** while lambda stored in a class as a private static method, and invoked as an invokedynamic instruction.
*** variables:
**** lambdas cannot have state: Lambdas can only access final or effectively final.
**** Anonymous inner classes can use instance variables and thus can have state, 
*** scope: Lambdas can't define a variable with the same name as a variable in enclosing scope.
*** two lambda types: [(awesome examples HERE)|https://dzone.com/articles/how-lambdas-and-anonymous-inner-classesaic-work]
**** Non-capturing lambdas only use fields inside their bodies, whereas 
**** capturing lambdas access fields outside their bodies (like a closure)
*** [additional discussion|https://stackoverflow.com/questions/22637900/java8-lambdas-vs-anonymous-classes] 
* BNF: parameters arrow  body
** {{{ () -> "Hello World" }}}
** {{{ (String s) -> "Hello World:> " + s }}}
** {{{ (s) -> "Hello World:> " + s }}}
** {{{ (a,b) -> String.format("Hello World:%s> %s%n" , a , b )  }}}

!! definitions-terminology :
* functional descriptor : The signature of the abstract method of a functional interface provides the signature of a lambda expression
* target type : The type of the expression is deduced from the context in which the lambda is used.
* method reference syntax ("::" terminal) : 
** {{{ Integer::compare }}} : same as a lambda expression for the reference impl of compare()

/%
%%tab-LambdaUseCases

!! Lambda use case scenarios
; A variable declaration :     
%%prettify 
{{{
final BiFunction<String, Integer, Integer> remapper = (k, v) -> v == null ? 42 : v + 41â€¦
}}}
/%


; An assignment : 
%%prettify 
{{{
Consumer<String> c = (String s) -> {
    s = "hello";
    System.out.println(s);
};
}}}
/%

; A return statement : 	
%%prettify 
{{{
@Bean
	public CommandLineRunner run(RestTemplate restTemplate) throws Exception {
		return args -> {
			Quote quote = restTemplate.getForObject(
					"http://gturnquist-quoters.cfapps.io/api/random", Quote.class);
			log.info(quote.toString());
		};
	}
}}}
/%

; An array initializer :
; Method or constructor arguments :         
%%prettify 
{{{
public static List<Integer> findNumbers(
                @Nonnull List<Integer> l,
                @Nonnull BiPredicate<Integer, Integer> p) {
            final Integer fudgeFactor = 10;
            Predicate<Integer> predicateWithFudgeFactor = i -> p.test(i, i + fudgeFactor);
            List<Integer> newList = l.stream().filter(predicateWithFudgeFactor).collect(Collectors.toList());
            return newList;
        }
    }
}}}
/%

; A ternary conditional expression
; A cast expression 
/%
%%tab-functionalInterfaces
!! Lambda as functional interfacing
* lambdas are assignable to target type which are functional: 
** interfaces having only one abstract, non-default method
** there are a set of rules for inheritance and shadowing vs. functional interfaces valid for lambda target types
* compiler infers the target type, and from there infers the functional method signature. Then the compiler plays match-up, so the lambda expression can be assigned to the target type. 
* in Java, you can't always program in a purely functional style (i.e. without any side effect), only in a functional-style.


/%
%%tab-anonClasses
%%tabbedSection 
%%tab-SyntaxCompareContrast
!! Syntax vs. anonymous classes
* lambda :
{{{
List compactCars = findCars(cars,
     (Car c) ->
        car.getType().equals(CarTypes.COMPACT)
);
}}}
* anonymous :
{{{

List<Car> compactCars = findCars(cars,
     new Searchable() {
        public boolean test(Car car) {
           return car.getType().equals(
                     CarTypes.COMPACT);
        }
});
}}}

/%
%%tab-compareContrast
!! Rules
* lambda must take the signature of its abstract  method. Otherwise, a compiler error is generated.
** Because of this, the same lambda expression can be associated with different functional interfaces if they have a compatible abstract method signature.
* Lambda expressions are an ALTERNATIVE to anonymous classes, but they are not the same:
* differences: 
** Anonymous classes are compiled into, well, inner classes. 
** lambda expressions are converted into private static (in some cases) methods of their enclosing class and, using the invokedynamic instruction (added in Java 7), they are bound dynamically. 
*** Since there's no need to load another class, lambda expressions are more efficient. 
** For an anonymous class, 'this' keyword resolves to the anonymous class itself. For a lambda expression, it resolves to the enclosing class where the lambda is written.
** Default methods of a functional interface cannot be accessed directly from within lambda expressions. Anonymous classes can.
* They have some similarities:
** Local variables (variables or parameters defined in a method) can only be used if they are declared final or are effectively final.
** You can access instance or static variables of the enclosing class.
** They must not throw more checked exceptions than specified in the throws clause of the functional interface method. Only the same type or a subtype.

/%
/%
/%
%%tab-limitations
* If the lambda expression uses a parameter name which is the same as a variable name of the enclosing context, a compile error is generated:
{{{
// This doesn't compile
String s = ""; s -> System.out.println(s);
}}}

/%
/%
--------




