%%tabbedSection 
%%tab-Throwable
!java.lang.Throwable

; checked : try-catch is required <? extends java.lang.Exception> 
; unchecked : try-catch is optional java.lang.RuntimeException or java.lang.Error
!throws clause 
* Finally, if the code that throws a checked exception is not inside a try-catch block, the method that contains that code must declare the exception in the throws clause.
* The throws keyword indicates the exceptions that a method can throw. Only checked exceptions are required to be declared this way.
/%

%%tab-exception
[exceptionsMembersTable.png]
!Exception(String message, Throwable cause, boolean enableSuppression, boolean writableStackTrace)
* Constructs a new exception with the specified detail message, cause, suppression enabled or disabled, and writable stack trace enabled or disabled.
* convention to add Exception to exception classes' name.
If an exception is not handled, the JVM provides a default exception handler that performs the following tasks:
# It prints out exception description.
# It prints the stack trace (hierarchy of methods where the exception occurred).
# It causes the program to terminate.



/%
%%tab-try_catch_block
* The catch block is optional. You can have both or either a catch block or a finally block
* The finally block is always executed, no matter if an exception is thrown in the try block, re-thrown inside the catch block, or not caught at all
/%
%%tab-Multi_Catch_Finally
!Multi-Catch 
{{{
} catch (ArithmeticException | IndexOutOfBoundsException e) {
    if(e instanceof ArithmeticException) {
        // Do something else if the exception type
        // is ArithmeticException
    }
    e.printStackTrace();
    return res;
}
}}}
* If an exception can be caught in more than one block, the exception will be caught in the first block defined.
* However, we have to respect the hierarchy of the classes, if a superclass is defined before a subclass, a compile-time error is generated
* the "e" is treated as "final"
!Finally
* "finally" commonly used to close resources like database connections or file handlers.
* The finally block is always executed, no matter if:
** an exception is:
*** thrown in the try block, 
*** re-thrown inside the catch block, 
*** not caught at all, 
** the exception is caught or 
** either the try or catch block contains a return statement. 
* There's only one exception to this rule. If you call System.exit(), the program will terminate abnormally without executing the finally block. However, as it's considered bad practice to call System.exit(), this rarely happens.

/%
%%tab-try_with_resources
* "resource" are classes that implement "java.lang.AutoClosable" or "java.io.Closable"
* Catch and finally blocks are both optional in a try-with-resources

{{{
try (Resource r = new Resource()) { // Problem gone!
    r.useResource();
} catch (Exception e) {
    e.printStackTrace();
}
}}}
* cannot be used outside this block
* But what happens if the try block also throws an exception? 
** Well, the result is that the exception from the try block "wins" and the exceptions from the close() method are "suppressed".
** In fact, you can retrieve these suppressed exceptions by calling the Throwable[] java.lang.Throwable.getSuppressed() method from the exception thrown by the try block.
/%
%%tab-Custom_Exceptions
* The Error and Throwable classes are not actually used for custom exceptions.
{{{
class TooHardException extends Exception {
    public TooHardException(Exception e) {
        super(e);
    }
}
class TooEasyException extends RuntimeException { }
}}}
/%
/%



