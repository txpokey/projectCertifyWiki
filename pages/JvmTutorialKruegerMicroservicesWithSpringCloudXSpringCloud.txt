!!!Spring Cloud
%%tab-SpringCloud

%%tabbedSection 

%%tab-overview
* technology stack embedded in overall SpringIO universe
* pattern : common problems needing solutions from tech stack
** configuration management:
*** distributed
*** versioned
*** centralized
** service discovery
** load balance
** inter-service calls 
** circuit breakers : prevent non-linear resource consumption, loss of control
** routing
* spring cloud netflix : spring adaptation and annotations of Netflix OSS

/%
%%tab-setup
* spring-cloud-starter-parent (I think this is subsumed by any of the *-starter)
* spring-cloud-starter-FOO : where FOO is some stack component in spring cloud landscape
/%
%%tab-configuration
* cloud's distributed nature, and automation : driver for configuration as a service
** e.g. hard to share filesystems, so property files suck 
** environment variables have a hot swap, scaling, portability and consistency problem
* needs analysis : dynamic reloading, client configs self-register, push/pull model like git(1)
* solutions: 
** Spring Cloud Bus : push changes
** Spring Cloud Eureka : self-registration
%%tabbedSection 
%%tab-CloudConfigServer
* could hoover from git-backed local file system
** placed behind load balancer
* spring-cloud-starter-config
* decorate the spring application class (with main()):
** @SpringBootApplication
** @EnableConfigServer
* EnvironmentRepository : git or file (native)
** naming convention for property files: <sping.application.name>-<profile>.yml
** directly supports spring.profiles.active 
*** https:<server>:<port>/<spring.application.name>.<profile>
*** server-side pattern matching rules give the URI used for GET
*** without the <profile> then <spring.application.name>.(yml|properties) are included
* spring.cloud.config.failFast=true // default == false 
* config server logical variables over ride local matching properties
** local ones are fallback candidates 
/%
%%tab-Client
*  spring-cloud-starter == client
* bootstrap.properties :
{{{
spring.application.name: appName
spring.cloud.config.uri: whereDoIGoURI
}}}
* Environment - multiple property sources 
** Spring Cloud Config client adding another property source via the GET <uri>
/%
%%tab-Lab3
[Lab3 instructions | https://github.com/kennyk65/Microservices-With-Spring-Student-Files/blob/master/LabInstructions/Lab%203.md]
/%
/%
/%
%%tab-Eureka
* [netflix eureka | https://github.com/Netflix/eureka/wiki/Eureka-REST-operations]
* service discovery : clients register themselves (ala JINI : multicast )
** keep alive heartbeats or registration is scratched : "/health"
** high available : multiple copies of the service are co-operating for consistency (like ZooKeeper)
*** but also can support round the world Zones (ala my Nokia project)
*** URI can be provided by config server
%%tabbedSection 
%%tab-EurekaServer
* spring-cloud-starter-eureka-server
* decorate the spring application class (with main()):
** @SpringBootApplication
** @EnableEurekaServer
/%
%%tab-EurekaAsClient
* yml : e.g. - single instance config 
** registerWithEureka: false
** fetchRegistry: false
** serviceUrl: <list of servers that are co-operating>
/%
%%tab-DiscoveryClient
* spring-cloud-starter-eureka-server
* decorate the spring application class (with main()):
** @SpringBootApplication
** @EnableDiscoveryClient
* application.properties : for default fallbacks : could be serviced from config server
** eureka.client.serviceUrl.defaultZone: <url>
* actual client interface : DiscoveryClient::getInstances("STORES")
** STORES == Eureka VIP
/%
%%tab-pragmatics
* stateful, peer-to-peer for consistency and redundancy
* both techstacking config server and eureka
* Config First Bootstrap : 
** spring.cloud.config.uri property in each app 
** to find Eureka
* Eureka First Bootstrap :  
** spring.cloud.config.discovery: true
** eureka.client.serviceUrl.defaultZone: <url>
** client has two trips to obtain configuration
/%
%%tab-Lab
* [Lab 4 | https://github.com/kennyk65/Microservices-With-Spring-Student-Files/blob/master/LabInstructions/Lab%204.md]
/%
/%
/%
%%tab-Ribbon
* client side load balancer
** what if server side load balancer was down? 
* netflix oss : automatic eureka integation
** cache & batching supported
* multiple protocols supported
* terminology : 
** listOfservers : mapping: 'server pool' vs. service ID 
*** Spring Cloud assumes Eureka if classpath
*** filtered list : e.g. same zone is strategy opinion spring uses
{{{
    bobServiceName:
      ribbon:
        listOfServers: bob1.com, bob2.com ...
}}}

** ping : heartbeat (from Eureka)
*** consistency has a latency
** ZoneAwareLoadBalancer : route calls into filtered list
*** Spring Cloud default 
** ZoneAvoidanceRule : default rule on making calls at all
* client : maven : spring-cloud-starter-ribbon
* [Lab 5 | https://github.com/kennyk65/Microservices-With-Spring-Student-Files/blob/master/LabInstructions/Lab%205.md]
/%
%%tab-Feign
* declarative RESTful client, easier to use than RestTemplate
** // assuming /foo/{0} in the uri string 
*** {{{new RestTemplate()).getForObject(instance.getUri(),Sku.class, 12345 }}} 
* spring-cloud-starter-feign
* decorate the spring application class (with main()):
** @SpringBootApplication
** @EnableFeignClients
* decorate an interface, similar to JPA:
** @FeignClient(url=<url>)
* use SpringMVC annotations to mark up the service methods in the interface. 
** can replace url with Eureka client id
*** @FeignClient(<serviceNameString>)
* @Autowire client stub reference into consuming service
* no unit testing, since no code to test. but integration testing.
* Ribbon : automatically load balancing 
* [Lab 6 | https://github.com/kennyk65/Microservices-With-Spring-Student-Files/blob/master/LabInstructions/Lab%206.md]
/%

%%tab-Hystrix
* circuit breakers : hystrix 
** hystrix dashboard and Turbine
** cascade failure prevention : since microservices vulnerablity
* pragmatics: 
** default : 20 failures in 5 sec -> open circuit 
** fallback employed, including chaining fallbacks
** self-annealing : 5 sec default to close the circuit. 
** what failures count : exceptions or timeouts 
* spring-cloud-starter-hystrix
* decorate the spring application class (with main()):
** @SpringBootApplication
** @EnableHystrix
* writing the fallback : 
{{{
@HystrixCommand(fallbackMethod="defaultMethodName")
Object getStores(...) {}
Object defaultMethodName(...) {}
}}}
* tuning parameters are annotation args
{{{
@HystrixCommand(fallbackMethod="defaultMethodName", 
    commandProperties = {
        @HystrixProperty(name="foo", value="bar")
    }
)
...
}}}
* synchronous (default) 
* asynchronous
** like @Async : geta Future to deal with

{{{
    @HystrixCommand(....)
    Future<Store> getStores(...) { 
        return new AsyncResult<Store>() {
            @Override
            public Store invoke() {}
        }
    }
}}}
* reactive : observer pattern : get a listener & thread!
** (JavaRX Observable, java.lang.Observable is deprecated in Java9)
{{{
    @HystrixCommand(....)
    Observable<Store> getStores(...) { 
        return new ObservableResult<Store>() {
            @Override
            public Store invoke() {}
        }
    }
}}}

/%
%%tab-cloudBus
* misnamed : service bus for only pushing config 
* solution : "push" dynamic configuration updates w/o bouncing machines or polling
** broadcast to clients : pub-sub : AMQP (RabbitMQ)
* spring-cloud-starter-bus-amqp 
** cloud bus self-identifies client-server relationships by inspecting Spring Config annotations
** POST /bus/refresh to config server to trigger "push"
** Spring Boot only refreshes beans marked with one of:
*** @ConfigurationProperties(prefix="eurekaName") 
**** shorthand to make entire class as if each field were @Value 
**** but at least need setters for the beans. UGH
*** @RefreshScope : hot swapping beans : Spring Cloud : lazy via Proxy for the bean
* [Lab 8 | https://github.com/kennyk65/Microservices-With-Spring-Student-Files/blob/master/LabInstructions/Lab%208.md]

/%

%%tab-APIgateway
%%tabbedSection 
%%tab-purpose
* in SOA, this would be the service bus per se. 
* Enterprise Integration Patterns: routing, caching, protocol transform
** abstraction (hiding) services on server side: only publishing a custom API 
** SSO (?federation)

/%
%%tab-zuul
* netflix again
* reverse proxy : routing and load balance
** spring-cloud-starter-zuul 
** @EnableZuulProxy
* automatically activates & engages Ribbon, Hystrix capabilities for calls into the gateway
* routing black and white listing : 
** e.g. zuul.ignored-services: * 
** zuul.prefix:  /api

/%
%%tab-caching
* interfacing: 
** @EnableCacheable
** @Cacheable(value="inventoryServiceBeingCached", key="#sku")
*** guess : using ASPECTS to check cache for hit, avoid calling actual method.
* pragmatics : 
** inventoryService should be able to decide (HTTP: expire and etags)
/%

%%tab-eTags
* "shallow" : HTTP header: hashcode unique to service method vs. client vs. server (ordered triples)
* "if-none-match" allows etag hashcode as if a token :
** (match: HTTP 304 - not modified) else (HTTP: 200)
* serverside : @Bean Filter <-> return new ShallowEtagHeaderFilter() ;
* clientside : RestTemplate( new HttpComponentsClientRequestFactory(cachingClient))
** could start RestTemplate with a serviceId instead of a URL 
/%

%%tab-resourceExpansion
* gateway will walk HATEOAS links : need mapping to JSON backing the links 
* Traverson : traverse the links 
** ...hateoas.Resource : wrapper for domain objects
** extends Resources<Resource<T>> { ... }
* Spring Data REST projections will inline instead of HATEOAS links. 
** @Projection(...) <-> /teams/1?projection=inlinePlayers 
/%

%%tab-protocolConvert
* no automatic solutions in this Netflix stack
* options : 
** JMS
** AMQP
** SOAP 
* Spring Integration: supports Enterprise Integration Patterns
** in-memory messaging system, with predefined mappings 
*** gateway (in or out) via message channels 
*** messages and payloads architecture model 

/%
/%
/%
