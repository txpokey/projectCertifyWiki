!Queue 
; : A collection designed for holding elements prior to processing.

 [qInterfaceStructure.png]

It is possible for a Queue implementation to restrict the number of elements that it holds; such queues are known as bounded. Some Queue implementations in java.util.concurrent are bounded, but the implementations in java.util are not.

Queues typically order elements FIFO (first-in-first-out) manner. Among the exceptions are priority queues, which order elements according to a supplied comparator, or the elements' natural ordering, and LIFO queues (or stacks) which order the elements LIFO (last-in-first-out). Whatever the ordering used, the head of the queue is that element which would be removed by a call to remove() or poll(). 

In a FIFO queue, all new elements are inserted at the tail of the queue.

Queue implementations generally do not allow insertion of null elements, although some implementations, such as LinkedList, do not prohibit insertion of null. Even in the implementations that permit it, null should not be inserted into a Queue, as null is also used as a special return value by the poll method to indicate that the queue contains no elements.

Queue implementations generally do not define element-based versions of methods equals and hashCode but instead inherit the identity based versions from class Object, because element-based equality is not always well-defined for queues with the same elements but different ordering properties.

The Queue interface does not define the blocking queue methods, which are common in concurrent programming. These methods, which wait for elements to appear or for space to become available, are defined in the interface java.util.concurrent.BlockingQueue, which extends Queue.

!Deque
[dqMethodsSummary.png]

Usually pronounced as deck, a deque is a double-ended-queue: A double-ended-queue is a linear collection of elements that supports the insertion and removal of elements at both end points. 

When the capacity of the Deque instance is restricted, the preferred methods are offerFirst and offerLast because addFirst might fail to throw an exception if it is full.
----

* FIFO: poll() and peek(); return null on empty queues
* LIFO: ArrayDeque push() and pop() ... but not on Queue interface 

DeQueue can be used both as LIFO and FIFO

Priority Queues sort based on their comparitor

