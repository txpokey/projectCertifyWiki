!!!Lesson: Streams Operations aka Aggregate Operations
!!Differences Between Aggregate Operations and Iterators
* they are also called stream operations.
* stream operations, like forEach, are different from iterators: 
** You specify "what", the JDK does the how to process the stream. 
** supports parallel computing. 
** They process elements from a stream, not directly from a collection. 
** They support behavior as parameters: You can specify lambda expressions as parameters. 

!! Stream.reduce Method
* use BinaryOperator on each stream element, ultimately returning a scalar result

!! Stream.collect Method

{{{
<R,A> R collect(Collector<? super T,A,R> collector)
}}}

* stream terminator : Performs a mutable reduction operation on the elements of this stream using a Collector. 
* A Collector encapsulates the functions used as arguments to collect(Supplier, BiConsumer, BiConsumer), allowing for reuse of collection strategies and composition of collect operations such as multiple-level grouping or partitioning.
* If the stream is parallel, and the Collector is concurrent, and either the stream is unordered or the collector is unordered, then a concurrent reduction will be performed (see Collector for details on concurrent reduction.)
* When executed in parallel, multiple intermediate results may be instantiated, populated, and merged so as to maintain isolation of mutable data structures. Therefore, even when executed in parallel with non-thread-safe data structures (such as ArrayList), no additional synchronization is needed for a parallel reduction.

API Note:
Performing a reduction operation with a Collector should produce a result equivalent to:
{{{
     R container = collector.supplier().get();
     for (T t : data)
         collector.accumulator().accept(container, t);
     return collector.finisher().apply(container);
}}}

!groupingBy
* The [groupingBy operation in this example|https://www.mkyong.com/java8/java-8-collectors-groupingby-and-mapping-example/] takes two parameters, a classification function and an instance of Collector. 
** The Collector parameter is called a downstream collector. This is a collector that the Java runtime applies to the results of another collector. 
** Consequently, this groupingBy operation enables you to apply a collect method to the List values created by the groupingBy operator. 
{{{ 
        List<String> items =
                Arrays.asList("apple", "apple", "banana",
                        "apple", "orange", "banana", "papaya");

        Map<String, Long> result =
                items.stream().collect(
                        Collectors.groupingBy(
                                Function.identity(), Collectors.counting()
                        )
                );
        // 	papaya=1, orange=1, banana=2, apple=3

}}} 


* This multilevel reduction example applies the collector mapping, which applies the mapping function Person::getName to each element of the stream. Consequently, the resulting stream consists of only the names of members. 
{{{
Map<Person.Sex, List<String>> namesByGender =
    roster
        .stream()
        .collect(
            Collectors.groupingBy(
                Person::getGender,                      
                Collectors.mapping(
                    Person::getName,
                    Collectors.toList())));
}}}

!![Concurrent Reduction|https://docs.oracle.com/javase/tutorial/collections/streams/reduction.html]
{{{
ConcurrentMap<Person.Sex, List<Person>> byGender =
    roster
        .parallelStream()
        .collect(
            Collectors.groupingByConcurrent(Person::getGender));
}}}
* This is called a concurrent reduction. The Java runtime performs a concurrent reduction if all of the the following are true for a particular pipeline that contains the collect operation:
** The stream is parallel.
** The parameter of the collect operation, the collector, has the characteristic Collector.Characteristics.CONCURRENT. To determine the characteristics of a collector, invoke the Collector.characteristics method.
** Either the stream is unordered, or the collector has the characteristic Collector.Characteristics.UNORDERED. To ensure that the stream is unordered, invoke the BaseStream.unordered operation.

