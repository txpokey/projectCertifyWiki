%%tabbedSection 
%%tab-ObjectOriented
%%tabbedSection 
%%tab-Object
!! java.lang.Object 
{{{
protected Object clone() throws CloneNotSupportedException
protected void finalize() throws Throwable
public int hashCode()
public boolean equals(Object obj)
public String toString()
}}}
! public int hashCode()
* Idempotence
* object equality : 
** equals(Object) means hashCode() equality
** else hashCode() must be unique per Object

! public boolean equals(Object obj)
* Idempotence
* For any non-null reference value x, y, z:
** x.equals(null) should return false.
** reflexive: true == x.equals(x)
** symmetric: true == (( x.equals(y) ) && ( y.equals(x) ))
** transitive: if (( x.equals(y) ) && ( y.equals(z) )) then ( x.equals(z) )

/%
%%tab-OverloadingOverriding
!! Overloading & Overriding

* Overriding Rules : 
** The access modifier must be the same or more accessible
** The return type must be either the same or a subclass
** The name must be the same
** The argument list types must be the same
** The same exceptions or their subclasses are allowed to be thrown

/%

%%tab-Inheritance
!! Inheritance
* IS-A relationship : keyword '''extends''' is used to specify this relationship
*  Because of encapsulation, attributes are supposed to be hidden
** An attribute or method is inherited with the same visibility level as the one defined in the superclass. 
** However, in the case of methods, you can change them to be more visible, but you cannot make them less visible.
* ''Liskov substitution principle'' with methods: 
** if a subclass doesn't have a method of the superclass, the subclass cannot be used wherever the superclass is used. 
* Rules - for a subclass:
** Inherited attributes can be used directly, just like any other.
** An attribute can be declared in the subclass with the same name as the one in the superclass, thus hiding it.
** New attributes that are not in the superclass can be declared in the subclass.
** Inherited methods can be directly used as they are.
** A new instance method can be declared in the subclass that has the same signature as the one in the superclass, thus overriding it.
** A new static method can be declared in the subclass that has the same signature as the one in the superclass, thus hiding it.
** New methods that are not in the superclass can be declared in the subclass.
** A constructor can be declared in the subclass that invokes the constructor of the superclass, either implicitly or by using the keyword '''super'''.
/%

%%tab-Polymorphism
!! Polymorphism
* generally: a single interface to entities of different types: 
** ''Ad hoc polymorphism (overloading)'': function has different implementations depending on specified types and combinations.
** Parametric polymorphism: generics in object-oriented programming
** Subtype (aka inclusion polymorphism): different classes related by some common superclass
!! Polymorphism implementation : 
* method invocation 
||static||dynamic
|at compile time| at runtime
| ''static dispatch'' | ''dynamic dispatch''
| ''static polymorphism''  | ''dynamic polymorphism''
| ''ad hoc'' polymorphism | subtype polymorphism
| parametric polymorphism  | 

* ''virtual method invocation'' : JVM decides at runtime which method to call based on the type of the object assigned, not the variable's reference type

/%
/%
/%
%%tab-Types

%%tabbedSection 
%%tab-classes
{{{
class Computer {
     abstract class Processor { }
     interface Pluggable { }
     enum PORTS {
         USB2, USB3, ESATA, HDMI
     }
}
}}}
/%
%%tab-Abstract
!! Abstract classes and methods

* common abstraction of type relationships to share behavior
* Abstract classes CANNOT be instantiated, only subclassed. They are declared with the abstract keyword:
{{{
abstract class AClass { }
}}}
* Abstract methods are declared WITHOUT an implementation (body), like this:
{{{
abstract void AMethod();
}}}
* Rules: 
** abstract keyword can only be applied to classes or non-static methods.
** An abstract class doesn't need to declare abstract methods to be declared abstract.
** If a class includes abstract methods, then the class itself must be declared abstract.
** If the subclass of an abstract class doesn't provide an implementation for all abstract methods, the subclass must also be declared abstract.
** Methods of an interface are considered abstract, so an abstract class that implements an interface can implement some or none of the interface methods.
/%
%%tab-interfaces
!!! interfaces
%%tabbedSection 
%%tab-vsClasses
* An interface cannot be marked as final.
* Interfaces are abstract by default (you don't have to specify it). 

* Fields declared in an interface are by default PUBLIC, STATIC, and FINAL. fields are CONSTANTS instead of VARIABLES:
{{{
interface Monitorable {
    int ID = 0; // You have to assign a value at creation time
}
class Resource implements Monitorable {
    void change() {
        ID = 5; // This WON'T compile
    }
}
}}}
/%
%%tab-vsAbstractClasses
!! vs. abstract classes
* significant differences:
** A class can only extend from ONE abstract class, but it can implement MULTIPLE interfaces.
** An abstract class can have a state through INSTANCE variables (fields). An interface CAN’T.
** An interface can extend any number of interfaces, but it cannot extend from any kind of class.
* if one or more of the interface's methods are not implemented, you must mark the class (and the methods) as abstract:
{{{
abstract class Server implements Monitorable {
    public void monitor() {
        // Implementation
    }
    public abstract void setup();
}
}}}
/%
%%tab-InterfaceInheritance

!! Inheritance
* two rules regarding inheritances and interfaces:
** A class can implement (not extend from) any number of interfaces.
** An interface can extend any number of interfaces, but it cannot extend from a class.
* @Override indicates that a method overrides a method declaration in a supertype, either in an interface or a parent class.
/%
%%tab-defaultMethods
%%tabbedSection 
%%tab-defaultMethods

!! default methods
{{{
interface Processable {
    void processInSequence();
    default void processInParallel() {
        /** Default implementation goes here */
    }
}
}}}
* interfaces can have 'default' methods, with implementation code as can abstract methods:
** Default methods cannot be final.
** Default methods cannot be synchronized.
** Default methods are always public.
** You cannot have default methods for the Object’s class methods.
/%
%%tab-defaultMethodInheritance
!! default Method Inheritance
* More specific interfaces (or classes) always WIN over less specific ones:
** Classes always WIN over interfaces. If a class overrides a default method, the class method will be the one used.
** when an inherited instance method from a class overrides a default interface method:
*** to call the default implementation of the method, you can do it with the name of the interface followed by the keyword 'super':
{{{
public void processInParallel() {
    Processable.super.processInParallel(); // only works with default methods
}
}}}
* Classes can implement multiple interfaces. What happens when two interfaces have the same default method? 
** It turns out that the result is a compiler error
{{{
interface Processable {
    void processInSequence();
    default void processInParallel() {
    }
}
interface Parallelizable {
    default void processInParallel() {
    }
}
public class Task
            implements Processable, Parallelizable {
...
}
}}}
/%/%/%/%/%

%%tab-innerClasses
%%tabbedSection 
%%tab-staticInner
{{{
public class Computer {
    private static class Component { }
    protected static class MotherBoard { }
    static class Slot { }
    private static String serialNumber = "1234X";
    public static class Mouse {
        void printSN() {
            System.out.println("MOUSE-" + serialNumber);
	}
    }
}
}}}
/%
%%tab-nonStatic
* Non-static inner classes are just called inner classes.
{{{
class Computer {
     class HardDrive {
     }
}
}}}
* NON-Static inner classes are accessed through an instance of their enclosing class
{{{
Computer c = new Computer();
Computer.HardDrive hd = c.new HardDrive();
}}}
* Another way to get an instance of an inner class is to use a method of the enclosing class to create it, avoiding that weird syntax.
{{{
public class Computer {
     class HardDrive { }
     public HardDrive getHardDrive() {
         return new HardDrive();
     }
}
}}}

/%
%%tab-local
* Local classes can only be used inside the method or block that defines them. 
* The local class has to be used BELOW its definition. Otherwise, the compiler won't be able to find it.
* local inner class is not a member of a class, it CANNOT be declared with an access level
*  local class can be declared as abstract or final (but not at the same time).
* they cannot declare static members (only static final attributes), just like inner classes.
* it can access the variables and parameters of the method ONLY if they are declared final or are effectively final.
* If the class is declared in a static method, static rules also apply, meaning that the local class only has access to the static
members of the enclosing class. 
{{{
void process() {
         class Core { }
         Core core = new Core();
}
}}}

/%
%%tab-anonymous
* The new operator is followed by the name of an interface or a class and the arguments to a constructor (or empty parentheses if it's an interface)
{{{Computer comp = new Computer() {
     void process() {
         // Here goes the definition
     }
};
}}}
* anonymous class can also be used in a method call.
{{{
class Program {
     void start(Computer c) {
         // Definition goes here
     }
     public static void main(String args[]) {
         Program program = new Program();
         program.start(new Computer() {
             void process() { /** Redefinition goes here */ }
         });
     }
}
}}}
* an anonymous class expression doesn’t declare a new class. It either IMPLEMENTS an existing interface or EXTENDS an existing class
* anonymous classes can’t have CONSTRUCTORS. If you want to run some initializing code, you have to do it with an initializer block.
* Because anonymous classes are a type of local classes, they have the same rules:
** They can access the members of their enclosing class
** They cannot declare static members (only if they are final static variables)
** They can only access local variables (variables or parameters defined in a method) if they are final or effectively final.
* When you use an anonymous class (a subclass object), you're using a superclass reference. With this reference, you can ONLY use the attributes and methods declared in that superclass.
/%
%%tab-shadowing
!! Shadowing
* what happens when a member of the inner class has the same name of a member of the enclosing class.
{{{
class Computer {
	 private String serialNumber = "1234XXX";
	 class HardDrive {
		 private String serialNumber = "1234DDD";
		 void printSN(String serialNumber) {
		
System.out.println("SN: " + serialNumber);
		 }
	}
}
}}}
* parameter serialNumber shadows the instance variable serialNumber of HardDrive that in turn, shadows the serialNumber of Computer.
* So, if we use this inside an inner class, it will refer to the inner class itself.
* If we need to reference the enclosing class, inside the inner class we can also use this , but in this way NameOfTheEnclosingClass.this : 
{{{
this ."Computer SN: " + Computer.this.serialNumber
}}}
/%
%%tab-innerEnum
tab enum 2
/%
%%tab-rules
* by being a member of a class: 
** the static inner class have access to the other members of the enclosing class, but only if they are STATIC.
** the non-static, inner class has access to the other members of the enclosing class, but this time, it DOESN'T matter if they are static or not.
* if we use 'this' inside an inner class, it will refer to the inner class itself.
* If we need to reference the enclosing class, inside the inner class we can also use 'this' , but in this way NameOfTheEnclosingClass.
{{{
this ."Computer SN: " + Computer.this.serialNumber
}}}
* But inner classes CANNOT contain static members, unless they're final
{{{
final static int capacity = 120; // It does compile!
}}}
* If the local class is declared inside a method, it can access the variables and parameters of the method ONLY if they are declared final or are effectively final. Effectively final is only concerned with references, not objects or their content. If you’re still not sure about a declaration being effectively final, try adding the final modifier to it.
/%
/%
/%
%%tab-generics
| generics   | [javaNotesGenerics]
/%
%%tab-enum
* An enum is an aggregation type that represents a FIXED values
* enum type CANNOT extend from a class because all enums extend from java.lang.Enum. 
{{{
public enum Volume {
    HIGH, MEDIUM, LOW // // each name is of course case sensitive
}
...
Volume level = Volume.LOW;
Volume low   = Volume.valueOf("LOW"); 
assert low == level ;
assert 0 == Volume.HIGH.ordinal() ;
assert "HIGH".equals(Volume.HIGH.name());
assert Volume.LOW instanceof Enum ;
assert Volume.LOW instanceof Volume ;
...
switch(level) {
    // Notice that the only the name of the enum is used,
    // in fact, Volume.HIGH for example, won't compile
    case HIGH: ...
    case MEDIUM: ...
    case LOW: ...
}
public enum VolumeValued {
    HIGH(100), MEDIUM(50), LOW(20);
    private int value;

    private VolumeValued(int value) {
        this.value = value;
    }
    public int getValue() {
        return value;
    }
}
}}}

/%
%%tab-var
;[local variable type inference|https://docs.oracle.com/en/java/javase/11/language/local-variable-type-inference.html]
/%
/%
%%tab-Encapsulation
%%tabbedSection 
%%tab-accessModifiers
;keywording access modifiers:[java access modifiers|javaAccessModifiers.png]
;compilation vs semantic rules:[java access modifiers|javaAccessRulesVsModifiers.png]
/%
%%tab-static
* something static as something belonging to the class and not to a particular instance of that class.
* which means that we don't need an instance to call it
* catch with static methods:
** they can't use instance variables, just static ones.
** keywords super and this cannot be used either.
* A static (initializer) block looks like this:
{{{
public class Example {
    private static int number;

    static {
        number = 100;
    }
    ...
}
}}}
* static block is executed when the class is initialized and in the order they are declared (if there's more than one).
* Just like static methods, they cannot reference instance attributes, or use the keywords super and this.
* In addition to that, static blocks cannot contain a return statement, and it's a compile-time error if the block cannot complete normally (for example, due to an uncaught exception).

/%
%%tab-final
* The final keyword can be applied to variables, methods, and classes.
** A final variable can only be initialized once and cannot change its value after that.
*** Final variable can be initialized either when declared, inside a constructor, or inside an initializer block.
** final is applied to a method, this cannot be overridden  by subclasses.
** when final is applied to a class, you cannot subclass it.
/%

/%
/%
%%tab-Functional
%%tabbedSection 

%%tab-functionalInterfaces
* [ functional interfaces  |javaNotesFunctionalProgramming]
* [ lambda expressions  | javaNotesLambdas]
/%
%%tab-immutable
* Sets all of its properties through a constructor
* Does not define setter methods
* Declares all its attributes private (and sometimes final)
* Has a class declared final to prevent inheritance
* Protects access to any mutable state:
** For example, if it has a List member, either the reference cannot be accessible outside the object or a copy must be returned (the same applies if the object's content must change)
/%
/%

/%
%%tab-pragmatics

%%tabbedSection 

%%tab-conventions
%%tabbedSection 
%%tab-methodNamingConventions
;methodNamingConventions:[|methodNamingConventions.png]
/%
%%tab-defaultValues
;default values:[|javaDefaultValues.png]
/%
/%
/%
%%tab-Assertions
%%tabbedSection 
%%tab-AssertionError
%%prettify 
{{{
assert booleanExpressionWithOutErrorMessage ;

// Which is equivalent to:

if(! booleanExpressionWithOutErrorMessage) {
     throw new AssertionError();
}
}}}
/%
%%prettify 
{{{
assert booleanExpressionWithErrorMessage: "Message about the error";

// Which is equivalent to:

if(! booleanExpressionWithErrorMessage) {
     throw new AssertionError("Message about the error");
}
}}}
/%
/%
%%tab-enableAsserts

%%prettify 
{{{
java –ea TestAssertion // enable for TestAssertion program
java –ea TestAssertion Hi
java –ea:ClassName MainClass
java –ea:com.example MainClass
java –ea:... MainClass // anonymous package
java –esa MainClass // System assertions
java –da MainClass // disable asserts for MainClass program
java –ea -da:ClassOne MainClass // enable all but ClassOne
}}}
/%
/%
/%
/%
%%tab-autoboxing
;autoboxing:Converting a primitive value (an int, for example) into an object of the corresponding wrapper class (Integer) is called autoboxing. The Java compiler applies autoboxing when a primitive value is:
# Passed as a parameter to a method that expects an object of the corresponding wrapper class.
# Assigned to a variable of the corresponding wrapper class.
;unboxing:Converting an object of a wrapper type (Integer) to its corresponding primitive (int) value is called unboxing. The Java compiler applies unboxing when an object of a wrapper class is:
# Passed as a parameter to a method that expects a value of the corresponding primitive type.
# Assigned to a variable of the corresponding primitive type.

[oracle page on autoboxing|https://docs.oracle.com/javase/tutorial/java/data/autoboxing.html]
/%




%%tab-bytecode
;invokedynamic:[infoQ article on invokedynamic|https://www.infoq.com/articles/Invokedynamic-Javas-secret-weapon]
/%

%%tab-miscPages
* [javaSxNotesOnInterfaces]
* [javaSxNotesOnGenericsAlaBookEH]
* [javaSxNotesOnInnerTypesAlaBookEH]
* [testNGnotesAlaBookKaczanowski]
* [javaSxNotesOnCollectionsAlaBookEH]

/%
/%
/%

GGGG




