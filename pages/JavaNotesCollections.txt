%%tabbedSection 
%%tab-collectionFeatures
;collections feature comparison:[collectionsFeatureSummaryTable.png]
/%
%%tab-collectionComplexity
;[collections complexity comparison|https://www.bigocheatsheet.com/]:[collectionsCompare.png]
/%
%%tab-collectionTypes

* [java.util.Collection|javaNotesCollectionsTypeCollection]
* [java.util.Collections|javaNotesCollectionsTypeCollectionsFramework]
* [java.util.stream.Collectors|javaNotesStreamsTypeCollectors]
* [List|javaNotesCollectionsTypeCollectionList]
* [Set|javaNotesCollectionsTypeCollectionSet]
* [Queue|javaNotesCollectionsTypeCollectionQueue]
* [DeQueue|javaNotesCollectionsTypeCollectionQueue]
* [Map<K,V>|javaNotesCollectionsTypeCollectionMap]
%%tabbedSection
%%tab-Collection
;collections Implementations[collectionsImplementationsTable.png]
/%
%%tab-CollectionsReferences ..........................
* [Outline of the Collections Framework|https://docs.oracle.com/javase/8/docs/technotes/guides/collections/reference.html]
* [Java Collections Framework Overview | https://docs.oracle.com/javase/8/docs/technotes/guides/collections/index.html]
* [Java Collections API Design FAQ|https://docs.oracle.com/javase/8/docs/technotes/guides/collections/designfaq.html]
* [Oracle Tutorial on Collections|https://docs.oracle.com/javase/tutorial/collections/index.html]

%%tabbedSection 
%%tab-java10
* [java.util.Collection interface javadoc | https://docs.oracle.com/javase/10/docs/api/java/util/Collection.html]
* [java.util.Collections javadoc | https://docs.oracle.com/javase/10/docs/api/java/util/Collections.html]
/%
%%tab-java9
* [java.util.Collection interface javadoc | https://docs.oracle.com/javase/9/docs/api/java/util/Collection.html]
* [java.util.Collections javadoc | https://docs.oracle.com/javase/9/docs/api/java/util/Collections.html]
/%
%%tab-java8
* [java.util.Collection interface javadoc | https://docs.oracle.com/javase/8/docs/api/java/util/Collection.html]
* [java.util.Collections javadoc | https://docs.oracle.com/javase/8/docs/api/java/util/Collections.html]
/%
/%
/%
%%tab-StreamCollectors ..........................
FOO
/%
%%tab-List ..........................
!List 

* zero based index, and null is allowed
* growth by returning deep copies 
* ArrayList implementation uses Object[] 
* LinkedList , a doubly-linked list that also implements the Deque interface
\\

Or simply:
{{{
List<String> list = Arrays.asList("a", "b", "c", "d"); 
}}}
* It returns an implementation of List backed by the specified array
* (but it's not an ArrayList and it doesn't implement all methods of List ) // ToDO : check this
* that has fixed size, which means that you can't add elements to it. // ToDO : TEST THIS
* Also, modifications to the List are reflected in the original array.

----
List : ordered collections

Positional access — manipulates elements based on their numerical position in the list. This includes methods such as get, set, add, addAll, and remove.
Search — searches for a specified object in the list and returns its numerical position. Search methods include indexOf and lastIndexOf.
Iteration — extends Iterator semantics to take advantage of the list's sequential nature. The listIterator methods provide this behavior.
Range-view — The sublist method performs arbitrary range operations on the list.

List -- Iteration

As you'd expect, the Iterator returned by List's iterator operation returns the elements of the list in proper sequence. List also provides a richer iterator, called a ListIterator, which allows you to traverse the list in either direction, modify the list during iteration, and obtain the current position of the iterator.
The add method inserts a new element into the list immediately before the current cursor position
Any operation that expects a List can be used as a range operation by passing a subList view instead of a whole List

Calls to next and previous can be intermixed, but you have to be a bit careful. The first call to previous returns the same element as the last call to next. Similarly, the first call to next after a sequence of calls to previous returns the same element as the last call to previous.

List Algorithms

Most polymorphic algorithms in the Collections class apply specifically to List. Having all these algorithms at your disposal makes it very easy to manipulate lists. Here's a summary of these algorithms, which are described in more detail in the Algorithms section.

sort — sorts a List using a merge sort algorithm, which provides a fast, stable sort. (A stable sort is one that does not reorder equal elements.)
shuffle — randomly permutes the elements in a List.
reverse — reverses the order of the elements in a List.
rotate — rotates all the elements in a List by a specified distance.
swap — swaps the elements at specified positions in a List.
replaceAll — replaces all occurrences of one specified value with another.
fill — overwrites every element in a List with the specified value.
copy — copies the source List into the destination List.
binarySearch — searches for an element in an ordered List using the binary search algorithm.
indexOfSubList — returns the index of the first sublist of one List that is equal to another.
lastIndexOfSubList — returns the index of the last sublist of one List that is equal to another.
/% 
%%tab-Set .......................
!Set

* null : ok for HashSet ... NOT TreeSet (because of Comparable())
* HashSet and TreeSet . The difference between them is that TreeSet sorts the elements.
* nb. HashSet has no get() method... 
* TreeSet : For sorting, elements have to either implement the
* Comparable interface (the implementation of compareTo() has to be consistent with the implementation of the equals()

Bulk operations are particularly well suited to Sets; when applied, they perform standard set-algebraic operations. Suppose s1 and s2 are sets. Here's what bulk operations do:

s1.containsAll(s2) — returns true if s2 is a subset of s1. (s2 is a subset of s1 if set s1 contains all of the elements in s2.)
s1.addAll(s2) — transforms s1 into the union of s1 and s2. (The union of two sets is the set containing all of the elements contained in either set.)
s1.retainAll(s2) — transforms s1 into the intersection of s1 and s2. (The intersection of two sets is the set containing only the elements common to both sets.)
s1.removeAll(s2) — transforms s1 into the (asymmetric) set difference of s1 and s2. (For example, the set difference of s1 minus s2 is the set containing all of the elements found in s1 but not in s2.)
/% 
%%tab-Queue .......................
!Queue 
; : A collection designed for holding elements prior to processing.

 [qInterfaceStructure.png]

It is possible for a Queue implementation to restrict the number of elements that it holds; such queues are known as bounded. Some Queue implementations in java.util.concurrent are bounded, but the implementations in java.util are not.

Queues typically order elements FIFO (first-in-first-out) manner. Among the exceptions are priority queues, which order elements according to a supplied comparator, or the elements' natural ordering, and LIFO queues (or stacks) which order the elements LIFO (last-in-first-out). Whatever the ordering used, the head of the queue is that element which would be removed by a call to remove() or poll(). 

In a FIFO queue, all new elements are inserted at the tail of the queue.

Queue implementations generally do not allow insertion of null elements, although some implementations, such as LinkedList, do not prohibit insertion of null. Even in the implementations that permit it, null should not be inserted into a Queue, as null is also used as a special return value by the poll method to indicate that the queue contains no elements.

Queue implementations generally do not define element-based versions of methods equals and hashCode but instead inherit the identity based versions from class Object, because element-based equality is not always well-defined for queues with the same elements but different ordering properties.

The Queue interface does not define the blocking queue methods, which are common in concurrent programming. These methods, which wait for elements to appear or for space to become available, are defined in the interface java.util.concurrent.BlockingQueue, which extends Queue.

!Deque
[dqMethodsSummary.png]

Usually pronounced as deck, a deque is a double-ended-queue: A double-ended-queue is a linear collection of elements that supports the insertion and removal of elements at both end points. 

When the capacity of the Deque instance is restricted, the preferred methods are offerFirst and offerLast because addFirst might fail to throw an exception if it is full.
----

* FIFO: poll() and peek(); return null on empty queues
* LIFO: ArrayDeque push() and pop() ... but not on Queue interface 

DeQueue can be used both as LIFO and FIFO

Priority Queues sort based on their comparitor
/%
%%tab-Map .......................
!Map

* TreeMap : sorts the keys 
* It is important that the objects used as keys have the methods equals() and hashCode() implemented.
{{{
Set<String> keys = map.keySet();
Collection<Integer> values = map.values(); 		
map.isEmpty() 
}}}
/%
/%
/%
%%tab-FactoryMethods
; [factoryMethodsCollectionsJava9.png]
/%
%%tab-collectionSorting
* [Ordering|javaNotesCollectionsOrdering]
* [SortedMap and SortedSet|javaNotesCollectionsSortedTypes]
* Convenience 
* Wrapper 
/%

%%tab-studyResources
* [javaSxNotesOnCollectionsAlaBookEH]
* [javaSeNotesOnCollectionsAlaOraTutorial]
/%


/%
